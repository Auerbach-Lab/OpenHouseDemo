source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/serial.R")
source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/serial.R")
# OPEN AND TESTING THE CONNECTION
open(myArduino)
isOpen(myArduino)
source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/serial.R")
close(myArduino)
isOpen(myArduino)
source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/serial.R")
source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/serial.R")
View(dataFromArduino)
isOpen(myArduino)
open(myArduino)
isOpen(myArduino)
source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/serial.R")
source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/serial.R")
read.serialConnection(myArduino n=8)
read.serialConnection(myArduino, n=8)
source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/serial.R")
read.serialConnection(myArduino, n=8)
source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/serial.R")
read.serialConnection(myArduino, n=8)
read.serialConnection(myArduino, n=8)
read.serialConnection(myArduino, n=8)
read.serialConnection(myArduino, n=0)
source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/serial.R")
close(myArduino)
source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/serial.R")
read.serialConnection(myArduino, n=0)
read.serialConnection(myArduino, n=0)
read.serialConnection(myArduino, n=0)
read.serialConnection(myArduino, n=0)
close(myArduino)
source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/serial.R")
source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/serial.R")
source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/serial.R")
read.serialConnection(myArduino, n=0)
read.serialConnection(myArduino, n=0)
read.serialConnection(myArduino, n=0)
read.serialConnection(myArduino, n=0)
read.serialConnection(myArduino, n=0)
close(myArduino)
source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/serial.R")
read.serialConnection(myArduino, n=0)
read.serialConnection(myArduino, n=0)
read.serialConnection(myArduino, n=0)
read.serialConnection(myArduino, n=0)
dataFromArduino <- tibble(
capture.output(cat(read.serialConnection(myArduino, n = 0)))
)
dataFromArduino <- tibble(
capture.output(cat(read.serialConnection(myArduino, n = 0)))
)
View(dataFromArduino)
View(dataFromArduino)
View(dataFromArduino)
close(myArduino)
# READ MAPPED DATA SENT FROM MY ARDUINO
dataFromArduino <- tibble(
capture.output(cat(read.serialConnection(myArduino, n = 0)))
)
# SERIAL CONNECTION
# listPorts()
myArduino <-  serialConnection(
port = "COM7",
mode = "9600,n,8,1" ,
buffering = "none",
newline = TRUE,
eof = "",
translation = "cr",
handshake = "none",
buffersize = 4096
)
# OPEN AND TESTING THE CONNECTION
while (!isOpen(myArduino)) open(myArduino)
# READ MAPPED DATA SENT FROM MY ARDUINO
dataFromArduino <- tibble(
capture.output(cat(read.serialConnection(myArduino, n = 0)))
)
# READ MAPPED DATA SENT FROM MY ARDUINO
dataFromArduino <- tibble(
capture.output(cat(read.serialConnection(myArduino, n = 0)))
)
# READ MAPPED DATA SENT FROM MY ARDUINO
dataFromArduino <- tibble(
capture.output(cat(read.serialConnection(myArduino, n = 0)))
)
View(dataFromArduino)
View(dataFromArduino)
View(dataFromArduino)
isOpen(myArduino)
dataFromArduino <- tibble_row(
capture.output(cat(read.serialConnection(myArduino, n = 0)))
)
dataFromArduino <- tibble_row(
capture.output(cat(read.serialConnection(myArduino, n = 0)))
)
dataFromArduino <- tibble_row(
capture.output(cat(read.serialConnection(myArduino, n = 0)))
)
foo <- capture.output(cat(read.serialConnection(myArduino, n=0)))
foo <- capture.output(cat(read.serialConnection(myArduino, n=0)))
view(foo)
bar <- dataFromArduino <- tibble_row(
capture.output(cat(read.serialConnection(myArduino, n = 0)))
)
cat(read.serialConnection(myArduino, n = 0))
foo = tail(foo, length(foo)-1)
bar <- cat(read.serialConnection(myArduino, n = 0))
bar <- tibble_row(read.serialConnection(myArduino, n = 0))
bar <- tibble_row(read.serialConnection(myArduino, n = 0))
View(bar)
tibble_row(foo)
tibble_row(list(foo))
View(tibble_row(list(foo)))
bar <- tibble(read.serialConnection(myArduino, n = 0))
bar <- tibble(read.serialConnection(myArduino, n = 0))
View(bar)
save.image("C:/Users/Brian/Desktop/serial.RData")
View(dataFromArduino)
View(dataFromArduino)
close(myArduino)
shiny::runApp()
runApp()
runApp()
runApp()
close(arduino)
runApp()
close(arduino)
runApp()
close(arduino)
runApp()
runApp()
runApp()
closeAllConnections()
runApp()
arduino <- serialConnection(port="COM7", mode="9600,n,8,1")
open(arduino)
close(arduino)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
scores = tibble(loud=c[0,0,0,0,0,0,0,0], quiet=c[0,0,0,0,0,0,0,0])
scores = tibble(loud=c(0,0,0,0,0,0,0,0), quiet=c(0,0,0,0,0,0,0,0)
)
View(scores)
scores = tibble(loud=c(0,0,0,0,0,0,0,0), quiet=c(0,0,0,0,0,0,0,0))
scores = tibble(loud=c(0,0,0,0,0,0,0,0), quiet=c(0,0,0,0,0,0,0,0))
data = "player=0 loud=500 quiet=999"
data %>% str_split(pattern = " ")
scan(text = "1 2 3")
scan(text = data)
scan(text = data %>% str_split(pattern = " "))
scan("player=0")
scan(text="player=0")
as.list(data)
as.list(data %>% str_split(" "))
as.list(data %>% str_split(" ") %>% str_split("="))
as.list(data %>% str_split(" ")
)
as.list("player", "0")
as.list("player", 0)
as.list("player=0")
as.list(c("player", "0"))
quest<-data.frame(city=c("Atlanta","New York","Atlanta","Tampa"), key_value=c("rev=63;qty=1;zip=45987","rev=10.60|34;qty=1|2;zip=12686|12694","rev=12;qty=1;zip=74268","rev=3|24|8;qty=1|6|3;zip=33684|36842|30254"))
remove(quest)
a <- str_split(data, " ")
View(a)
df <- data.frame(player=a[1])
View(df)
df <- data.frame(player=a[[1]])
df <- data.frame(player=a[[1]][1])
df <- data.frame(player=a[[1]][1], loud=a[[1]][2], quiet=a[[1]][3])
df <- data.frame(player=a[[1]][1], loud=a[[1]][2], quiet=a[[1]][3])
a <- str_split(data, "[ =]")
View(a)
df <- data.frame(player=a[[1]][2], loud=a[[1]][4], quiet=a[[1]][6])
View(df)
tib = tibble(player=c(1..8), loud=c(0,0,0,0,0,0,0,0), quiet=c(0,0,0,0,0,0,0,0))
tibble(player=range(1,8), loud=c(0,0,0,0,0,0,0,0), quiet=c(0,0,0,0,0,0,0,0))
tib = tibble(player=range(1,8), loud=c(0,0,0,0,0,0,0,0), quiet=c(0,0,0,0,0,0,0,0))
tib = tibble(player=seq(1,8), loud=c(0,0,0,0,0,0,0,0), quiet=c(0,0,0,0,0,0,0,0))
View(tib)
tib = tibble(player=seq(0,7), loud=c(0,0,0,0,0,0,0,0), quiet=c(0,0,0,0,0,0,0,0))
full_join(tib, df, by = "player")
df <- data.frame(player=as.integer(a[[1]][2]), loud=as.integer(a[[1]][4]), quiet=as.integer(a[[1]][6]))
full_join(tib, df, by = "player")
merge(tib, setNames(df, c('player', 'loud', 'quiet')), on='player', all=T) %>% distinct(player, .keep_all=T)
View(df)
merge(tib, setNames(df, c('player', 'loud', 'quiet')), on='player', all=T)
tib %>%
left_join(df, by = "player") %>%
mutate(loud = coalesce(loud.x, loud.y)) %>%
mutate(quiet = coalesce(quiet.x, quiet.y)) %>%
select(-loud.x, -loud.y, -quiet.x, -quiet.y)
tib %>%
left_join(df, by = "player")
tib %>%
left_join(df, by = "player") %>%
mutate(loud = coalesce(loud.x, loud.y))
df %>%
left_join(tib, by = "player") %>%
mutate(loud = coalesce(loud.x, loud.y)) %>%
mutate(quiet = coalesce(quiet.x, quiet.y)) %>%
select(-loud.x, -loud.y, -quiet.x, -quiet.y)
tib %>%
left_join(df, by = "player") %>%
mutate(loud = coalesce(loud.y, loud.x)) %>%
mutate(quiet = coalesce(quiet.y, quiet.x)) %>%
select(-loud.x, -loud.y, -quiet.x, -quiet.y)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
data.frame(player = seq(0,7), loud = c(0,0,0,0,0,0,0,0), quiet = c(0,0,0,0,0,0,0,0))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
data = player=3 loud=170.00 mid=158.00 quiet=152.00
data = "player=3 loud=170.00 mid=158.00 quiet=152.00"
a <- data %>% str_split(pattern = "[ =]")
View(a)
df <- data.frame(player=as.integer(a[[1]][2]), loud=as.integer(a[[1]][4]), mid=as.integer(a[[1]][6]), quiet=as.integer(a[[1]][8]))
View(df)
View(scores)
a <- data %>% str_split(pattern = "[ =]")
data = "player=3 loud=170.00 mid=158.00 quiet=152.00"
a <- data %>% str_split(pattern = "[ =]")
df <- data.frame(player=as.integer(a[[1]][2]), loud=as.integer(a[[1]][4]), mid=as.integer(a[[1]][6]), quiet=as.integer(a[[1]][8]))
scores <- data.frame(player=as.integer(a[[1]][2]), loud=as.integer(a[[1]][4]), mid=as.integer(a[[1]][6]), quiet=as.integer(a[[1]][8]))
newscores <- scores
newscores %>%
left_join(df, by = "player") %>%
mutate(loud = coalesce(loud.y, loud.x)) %>%
mutate(mid = coalesce(mid.y, mid.x)) %>%
mutate(quiet = coalesce(quiet.y, quiet.x)) %>%
select(-loud.x, -loud.y, -mid.x, -mid.y, -quiet.x, -quiet.y)
runApp()
runApp()
runApp()
shiny::runApp()
close(arduino)
closeAllConnections()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
View(scores)
runApp()
source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/Grapher.R")
data.frame(player = as.character(c("Purple", "White", "Green", "Blue")), loud = c(0,0,0,0), mid = c(0,0,0,0), quiet = c(0,0,0,0))
View(df)
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
View(df)
last_data(serialRead())
a <- serialRead() %>% str_split(pattern = "[ =]")
a <- read.serialConnection(arduino) %>% read.serialConnection(arduino)
arduino <- serialConnection(port="COM9", mode="9600,n,8,1")
open(arduino)
a <- read.serialConnection(arduino) %>% read.serialConnection(arduino)
View(df)
runApp()
source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/Grapher.R")
runApp()
runApp()
source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/Grapher.R")
# Add rat & human average data ---------------------------------------------
Final_graph =
Player_graph +
# Rat data
geom_smooth(data = rat_data,
se = FALSE, na.rm = TRUE, linewidth = 2, linetype = "dotdash",
method = "lm", formula = y ~ x
) +
geom_smooth(data = Human_data,
se = FALSE, na.rm = TRUE, linewidth = 2, linetype = "dotdash",
method = "lm", formula = y ~ x
) +
scale_color_manual(values = c(
"Purple" = "mediumorchid", "White" = "grey99", "Green" = "seagreen3", "Blue" = "royalblue", "Rat" = "gold", "Human" = "firebrick3"
)) +
labs(x = "Loudness\n(Intensity, dB)",
y = "Speed\n(Average reaction time, ms)",
color = "Player") +
scale_x_continuous(breaks = seq(-50, 90, by = 10)) +
labs(title = "<span style='color:#FFD700;'>Rat</span> v. <span style='color:#CD2626;'>Human</span>: *the ultimate hearing test*") +
annotate(geom = "text", x = 38, y = c(129, max(player_data$reaction, rat_data$reaction)),
label = c("Fast", "Slow" ), size = 8) +
annotate(geom = "text", x = c(42,88), y = 92,
label = c("Quiet", "Loud" ), size = 8) +
theme_ft_rc() +
theme(
# plot.title = element_text(size = 32),
plot.title = element_markdown(size = 32)
)
source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/Grapher.R")
runApp()
runApp()
shiny::runApp()
runApp()
source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/Grapher.R")
runApp()
source("A:/Coding/PlatformIO/Projects/OpenHouseDemo/Grapher.R")
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
